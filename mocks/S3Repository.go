// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// NewS3Repository creates a new instance of S3Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Repository(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Repository {
	mock := &S3Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// S3Repository is an autogenerated mock type for the S3Repository type
type S3Repository struct {
	mock.Mock
}

type S3Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *S3Repository) EXPECT() *S3Repository_Expecter {
	return &S3Repository_Expecter{mock: &_m.Mock}
}

// DeletePublicFile provides a mock function for the type S3Repository
func (_mock *S3Repository) DeletePublicFile(objKey string) error {
	ret := _mock.Called(objKey)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(objKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// S3Repository_DeletePublicFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublicFile'
type S3Repository_DeletePublicFile_Call struct {
	*mock.Call
}

// DeletePublicFile is a helper method to define mock.On call
//   - objKey string
func (_e *S3Repository_Expecter) DeletePublicFile(objKey interface{}) *S3Repository_DeletePublicFile_Call {
	return &S3Repository_DeletePublicFile_Call{Call: _e.mock.On("DeletePublicFile", objKey)}
}

func (_c *S3Repository_DeletePublicFile_Call) Run(run func(objKey string)) *S3Repository_DeletePublicFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *S3Repository_DeletePublicFile_Call) Return(err error) *S3Repository_DeletePublicFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *S3Repository_DeletePublicFile_Call) RunAndReturn(run func(objKey string) error) *S3Repository_DeletePublicFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetURLFile provides a mock function for the type S3Repository
func (_mock *S3Repository) GetURLFile(objKey string) (string, error) {
	ret := _mock.Called(objKey)

	if len(ret) == 0 {
		panic("no return value specified for GetURLFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(objKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(objKey)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(objKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// S3Repository_GetURLFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetURLFile'
type S3Repository_GetURLFile_Call struct {
	*mock.Call
}

// GetURLFile is a helper method to define mock.On call
//   - objKey string
func (_e *S3Repository_Expecter) GetURLFile(objKey interface{}) *S3Repository_GetURLFile_Call {
	return &S3Repository_GetURLFile_Call{Call: _e.mock.On("GetURLFile", objKey)}
}

func (_c *S3Repository_GetURLFile_Call) Run(run func(objKey string)) *S3Repository_GetURLFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *S3Repository_GetURLFile_Call) Return(s string, err error) *S3Repository_GetURLFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *S3Repository_GetURLFile_Call) RunAndReturn(run func(objKey string) (string, error)) *S3Repository_GetURLFile_Call {
	_c.Call.Return(run)
	return _c
}

// UploadPublicFile provides a mock function for the type S3Repository
func (_mock *S3Repository) UploadPublicFile(objFile *multipart.FileHeader) (string, error) {
	ret := _mock.Called(objFile)

	if len(ret) == 0 {
		panic("no return value specified for UploadPublicFile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*multipart.FileHeader) (string, error)); ok {
		return returnFunc(objFile)
	}
	if returnFunc, ok := ret.Get(0).(func(*multipart.FileHeader) string); ok {
		r0 = returnFunc(objFile)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*multipart.FileHeader) error); ok {
		r1 = returnFunc(objFile)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// S3Repository_UploadPublicFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadPublicFile'
type S3Repository_UploadPublicFile_Call struct {
	*mock.Call
}

// UploadPublicFile is a helper method to define mock.On call
//   - objFile *multipart.FileHeader
func (_e *S3Repository_Expecter) UploadPublicFile(objFile interface{}) *S3Repository_UploadPublicFile_Call {
	return &S3Repository_UploadPublicFile_Call{Call: _e.mock.On("UploadPublicFile", objFile)}
}

func (_c *S3Repository_UploadPublicFile_Call) Run(run func(objFile *multipart.FileHeader)) *S3Repository_UploadPublicFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *multipart.FileHeader
		if args[0] != nil {
			arg0 = args[0].(*multipart.FileHeader)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *S3Repository_UploadPublicFile_Call) Return(s string, err error) *S3Repository_UploadPublicFile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *S3Repository_UploadPublicFile_Call) RunAndReturn(run func(objFile *multipart.FileHeader) (string, error)) *S3Repository_UploadPublicFile_Call {
	_c.Call.Return(run)
	return _c
}
