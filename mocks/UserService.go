// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"mime/multipart"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
	"github.com/jerpsp/go-fiber-beginner/internal/api/v1/user"
	mock "github.com/stretchr/testify/mock"
)

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type UserService
func (_mock *UserService) CreateUser(c *fiber.Ctx, userParams user.UserCreateRequest, file *multipart.FileHeader) (*user.User, error) {
	ret := _mock.Called(c, userParams, file)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, user.UserCreateRequest, *multipart.FileHeader) (*user.User, error)); ok {
		return returnFunc(c, userParams, file)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, user.UserCreateRequest, *multipart.FileHeader) *user.User); ok {
		r0 = returnFunc(c, userParams, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, user.UserCreateRequest, *multipart.FileHeader) error); ok {
		r1 = returnFunc(c, userParams, file)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userParams user.UserCreateRequest
//   - file *multipart.FileHeader
func (_e *UserService_Expecter) CreateUser(c interface{}, userParams interface{}, file interface{}) *UserService_CreateUser_Call {
	return &UserService_CreateUser_Call{Call: _e.mock.On("CreateUser", c, userParams, file)}
}

func (_c *UserService_CreateUser_Call) Run(run func(c *fiber.Ctx, userParams user.UserCreateRequest, file *multipart.FileHeader)) *UserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 user.UserCreateRequest
		if args[1] != nil {
			arg1 = args[1].(user.UserCreateRequest)
		}
		var arg2 *multipart.FileHeader
		if args[2] != nil {
			arg2 = args[2].(*multipart.FileHeader)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserService_CreateUser_Call) Return(user1 *user.User, err error) *UserService_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserService_CreateUser_Call) RunAndReturn(run func(c *fiber.Ctx, userParams user.UserCreateRequest, file *multipart.FileHeader) (*user.User, error)) *UserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type UserService
func (_mock *UserService) DeleteUser(c *fiber.Ctx, userID uuid.UUID) error {
	ret := _mock.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) error); ok {
		r0 = returnFunc(c, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
func (_e *UserService_Expecter) DeleteUser(c interface{}, userID interface{}) *UserService_DeleteUser_Call {
	return &UserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", c, userID)}
}

func (_c *UserService_DeleteUser_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID)) *UserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserService_DeleteUser_Call) Return(err error) *UserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_DeleteUser_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID) error) *UserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ForgotPassword provides a mock function for the type UserService
func (_mock *UserService) ForgotPassword(c *fiber.Ctx, email string) error {
	ret := _mock.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for ForgotPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string) error); ok {
		r0 = returnFunc(c, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_ForgotPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForgotPassword'
type UserService_ForgotPassword_Call struct {
	*mock.Call
}

// ForgotPassword is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - email string
func (_e *UserService_Expecter) ForgotPassword(c interface{}, email interface{}) *UserService_ForgotPassword_Call {
	return &UserService_ForgotPassword_Call{Call: _e.mock.On("ForgotPassword", c, email)}
}

func (_c *UserService_ForgotPassword_Call) Run(run func(c *fiber.Ctx, email string)) *UserService_ForgotPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserService_ForgotPassword_Call) Return(err error) *UserService_ForgotPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_ForgotPassword_Call) RunAndReturn(run func(c *fiber.Ctx, email string) error) *UserService_ForgotPassword_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type UserService
func (_mock *UserService) GetAllUsers(c *fiber.Ctx, page int, limit int) ([]user.User, int64, error) {
	ret := _mock.Called(c, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []user.User
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, int, int) ([]user.User, int64, error)); ok {
		return returnFunc(c, page, limit)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, int, int) []user.User); ok {
		r0 = returnFunc(c, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, int, int) int64); ok {
		r1 = returnFunc(c, page, limit)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(*fiber.Ctx, int, int) error); ok {
		r2 = returnFunc(c, page, limit)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// UserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type UserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - page int
//   - limit int
func (_e *UserService_Expecter) GetAllUsers(c interface{}, page interface{}, limit interface{}) *UserService_GetAllUsers_Call {
	return &UserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", c, page, limit)}
}

func (_c *UserService_GetAllUsers_Call) Run(run func(c *fiber.Ctx, page int, limit int)) *UserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserService_GetAllUsers_Call) Return(users []user.User, n int64, err error) *UserService_GetAllUsers_Call {
	_c.Call.Return(users, n, err)
	return _c
}

func (_c *UserService_GetAllUsers_Call) RunAndReturn(run func(c *fiber.Ctx, page int, limit int) ([]user.User, int64, error)) *UserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function for the type UserService
func (_mock *UserService) GetUserByID(c *fiber.Ctx, userID uuid.UUID) (*user.User, error) {
	ret := _mock.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) (*user.User, error)); ok {
		return returnFunc(c, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) *user.User); ok {
		r0 = returnFunc(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, uuid.UUID) error); ok {
		r1 = returnFunc(c, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserService_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserService_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
func (_e *UserService_Expecter) GetUserByID(c interface{}, userID interface{}) *UserService_GetUserByID_Call {
	return &UserService_GetUserByID_Call{Call: _e.mock.On("GetUserByID", c, userID)}
}

func (_c *UserService_GetUserByID_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID)) *UserService_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserService_GetUserByID_Call) Return(user1 *user.User, err error) *UserService_GetUserByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserService_GetUserByID_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID) (*user.User, error)) *UserService_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// ResetPassword provides a mock function for the type UserService
func (_mock *UserService) ResetPassword(c *fiber.Ctx, resetPasswordToken string, newPassword string) error {
	ret := _mock.Called(c, resetPasswordToken, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string, string) error); ok {
		r0 = returnFunc(c, resetPasswordToken, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_ResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetPassword'
type UserService_ResetPassword_Call struct {
	*mock.Call
}

// ResetPassword is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - resetPasswordToken string
//   - newPassword string
func (_e *UserService_Expecter) ResetPassword(c interface{}, resetPasswordToken interface{}, newPassword interface{}) *UserService_ResetPassword_Call {
	return &UserService_ResetPassword_Call{Call: _e.mock.On("ResetPassword", c, resetPasswordToken, newPassword)}
}

func (_c *UserService_ResetPassword_Call) Run(run func(c *fiber.Ctx, resetPasswordToken string, newPassword string)) *UserService_ResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserService_ResetPassword_Call) Return(err error) *UserService_ResetPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_ResetPassword_Call) RunAndReturn(run func(c *fiber.Ctx, resetPasswordToken string, newPassword string) error) *UserService_ResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type UserService
func (_mock *UserService) UpdateUser(c *fiber.Ctx, userID uuid.UUID, userParams *user.UserUpdateRequest) error {
	ret := _mock.Called(c, userID, userParams)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID, *user.UserUpdateRequest) error); ok {
		r0 = returnFunc(c, userID, userParams)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
//   - userParams *user.UserUpdateRequest
func (_e *UserService_Expecter) UpdateUser(c interface{}, userID interface{}, userParams interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c, userID, userParams)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID, userParams *user.UserUpdateRequest)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *user.UserUpdateRequest
		if args[2] != nil {
			arg2 = args[2].(*user.UserUpdateRequest)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(err error) *UserService_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID, userParams *user.UserUpdateRequest) error) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRole provides a mock function for the type UserService
func (_mock *UserService) UpdateUserRole(c *fiber.Ctx, userID uuid.UUID, role user.UserRole) error {
	ret := _mock.Called(c, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID, user.UserRole) error); ok {
		r0 = returnFunc(c, userID, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserService_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type UserService_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
//   - role user.UserRole
func (_e *UserService_Expecter) UpdateUserRole(c interface{}, userID interface{}, role interface{}) *UserService_UpdateUserRole_Call {
	return &UserService_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", c, userID, role)}
}

func (_c *UserService_UpdateUserRole_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID, role user.UserRole)) *UserService_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 user.UserRole
		if args[2] != nil {
			arg2 = args[2].(user.UserRole)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserService_UpdateUserRole_Call) Return(err error) *UserService_UpdateUserRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserService_UpdateUserRole_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID, role user.UserRole) error) *UserService_UpdateUserRole_Call {
	_c.Call.Return(run)
	return _c
}
