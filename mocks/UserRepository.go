// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"time"

	"github.com/gofiber/fiber/v2"
	"github.com/google/uuid"
	"github.com/jerpsp/go-fiber-beginner/internal/api/v1/user"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type UserRepository
func (_mock *UserRepository) CreateUser(c *fiber.Ctx, user1 *user.User) (*user.User, error) {
	ret := _mock.Called(c, user1)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, *user.User) (*user.User, error)); ok {
		return returnFunc(c, user1)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, *user.User) *user.User); ok {
		r0 = returnFunc(c, user1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, *user.User) error); ok {
		r1 = returnFunc(c, user1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - user1 *user.User
func (_e *UserRepository_Expecter) CreateUser(c interface{}, user1 interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", c, user1)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(c *fiber.Ctx, user1 *user.User)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 *user.User
		if args[1] != nil {
			arg1 = args[1].(*user.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(user11 *user.User, err error) *UserRepository_CreateUser_Call {
	_c.Call.Return(user11, err)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(c *fiber.Ctx, user1 *user.User) (*user.User, error)) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type UserRepository
func (_mock *UserRepository) DeleteUser(c *fiber.Ctx, userID uuid.UUID) error {
	ret := _mock.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) error); ok {
		r0 = returnFunc(c, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
func (_e *UserRepository_Expecter) DeleteUser(c interface{}, userID interface{}) *UserRepository_DeleteUser_Call {
	return &UserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", c, userID)}
}

func (_c *UserRepository_DeleteUser_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID)) *UserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_DeleteUser_Call) Return(err error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_DeleteUser_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID) error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllUsers provides a mock function for the type UserRepository
func (_mock *UserRepository) FindAllUsers(c *fiber.Ctx, page int, perPage int) ([]user.User, int64, error) {
	ret := _mock.Called(c, page, perPage)

	if len(ret) == 0 {
		panic("no return value specified for FindAllUsers")
	}

	var r0 []user.User
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, int, int) ([]user.User, int64, error)); ok {
		return returnFunc(c, page, perPage)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, int, int) []user.User); ok {
		r0 = returnFunc(c, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, int, int) int64); ok {
		r1 = returnFunc(c, page, perPage)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(*fiber.Ctx, int, int) error); ok {
		r2 = returnFunc(c, page, perPage)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// UserRepository_FindAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllUsers'
type UserRepository_FindAllUsers_Call struct {
	*mock.Call
}

// FindAllUsers is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - page int
//   - perPage int
func (_e *UserRepository_Expecter) FindAllUsers(c interface{}, page interface{}, perPage interface{}) *UserRepository_FindAllUsers_Call {
	return &UserRepository_FindAllUsers_Call{Call: _e.mock.On("FindAllUsers", c, page, perPage)}
}

func (_c *UserRepository_FindAllUsers_Call) Run(run func(c *fiber.Ctx, page int, perPage int)) *UserRepository_FindAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_FindAllUsers_Call) Return(users []user.User, n int64, err error) *UserRepository_FindAllUsers_Call {
	_c.Call.Return(users, n, err)
	return _c
}

func (_c *UserRepository_FindAllUsers_Call) RunAndReturn(run func(c *fiber.Ctx, page int, perPage int) ([]user.User, int64, error)) *UserRepository_FindAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByEmail provides a mock function for the type UserRepository
func (_mock *UserRepository) FindUserByEmail(c *fiber.Ctx, email string) (*user.User, error) {
	ret := _mock.Called(c, email)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByEmail")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string) (*user.User, error)); ok {
		return returnFunc(c, email)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string) *user.User); ok {
		r0 = returnFunc(c, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, string) error); ok {
		r1 = returnFunc(c, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_FindUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByEmail'
type UserRepository_FindUserByEmail_Call struct {
	*mock.Call
}

// FindUserByEmail is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - email string
func (_e *UserRepository_Expecter) FindUserByEmail(c interface{}, email interface{}) *UserRepository_FindUserByEmail_Call {
	return &UserRepository_FindUserByEmail_Call{Call: _e.mock.On("FindUserByEmail", c, email)}
}

func (_c *UserRepository_FindUserByEmail_Call) Run(run func(c *fiber.Ctx, email string)) *UserRepository_FindUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_FindUserByEmail_Call) Return(user1 *user.User, err error) *UserRepository_FindUserByEmail_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_FindUserByEmail_Call) RunAndReturn(run func(c *fiber.Ctx, email string) (*user.User, error)) *UserRepository_FindUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByID provides a mock function for the type UserRepository
func (_mock *UserRepository) FindUserByID(c *fiber.Ctx, userID uuid.UUID) (*user.User, error) {
	ret := _mock.Called(c, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) (*user.User, error)); ok {
		return returnFunc(c, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID) *user.User); ok {
		r0 = returnFunc(c, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, uuid.UUID) error); ok {
		r1 = returnFunc(c, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_FindUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByID'
type UserRepository_FindUserByID_Call struct {
	*mock.Call
}

// FindUserByID is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
func (_e *UserRepository_Expecter) FindUserByID(c interface{}, userID interface{}) *UserRepository_FindUserByID_Call {
	return &UserRepository_FindUserByID_Call{Call: _e.mock.On("FindUserByID", c, userID)}
}

func (_c *UserRepository_FindUserByID_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID)) *UserRepository_FindUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_FindUserByID_Call) Return(user1 *user.User, err error) *UserRepository_FindUserByID_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_FindUserByID_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID) (*user.User, error)) *UserRepository_FindUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserByResetPasswordToken provides a mock function for the type UserRepository
func (_mock *UserRepository) FindUserByResetPasswordToken(c *fiber.Ctx, token string, expiresAt time.Time) (*user.User, error) {
	ret := _mock.Called(c, token, expiresAt)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByResetPasswordToken")
	}

	var r0 *user.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string, time.Time) (*user.User, error)); ok {
		return returnFunc(c, token, expiresAt)
	}
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, string, time.Time) *user.User); ok {
		r0 = returnFunc(c, token, expiresAt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*fiber.Ctx, string, time.Time) error); ok {
		r1 = returnFunc(c, token, expiresAt)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_FindUserByResetPasswordToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserByResetPasswordToken'
type UserRepository_FindUserByResetPasswordToken_Call struct {
	*mock.Call
}

// FindUserByResetPasswordToken is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - token string
//   - expiresAt time.Time
func (_e *UserRepository_Expecter) FindUserByResetPasswordToken(c interface{}, token interface{}, expiresAt interface{}) *UserRepository_FindUserByResetPasswordToken_Call {
	return &UserRepository_FindUserByResetPasswordToken_Call{Call: _e.mock.On("FindUserByResetPasswordToken", c, token, expiresAt)}
}

func (_c *UserRepository_FindUserByResetPasswordToken_Call) Run(run func(c *fiber.Ctx, token string, expiresAt time.Time)) *UserRepository_FindUserByResetPasswordToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Time
		if args[2] != nil {
			arg2 = args[2].(time.Time)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_FindUserByResetPasswordToken_Call) Return(user1 *user.User, err error) *UserRepository_FindUserByResetPasswordToken_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_FindUserByResetPasswordToken_Call) RunAndReturn(run func(c *fiber.Ctx, token string, expiresAt time.Time) (*user.User, error)) *UserRepository_FindUserByResetPasswordToken_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type UserRepository
func (_mock *UserRepository) UpdateUser(c *fiber.Ctx, userID uuid.UUID, user1 *user.User) error {
	ret := _mock.Called(c, userID, user1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*fiber.Ctx, uuid.UUID, *user.User) error); ok {
		r0 = returnFunc(c, userID, user1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - userID uuid.UUID
//   - user1 *user.User
func (_e *UserRepository_Expecter) UpdateUser(c interface{}, userID interface{}, user1 interface{}) *UserRepository_UpdateUser_Call {
	return &UserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", c, userID, user1)}
}

func (_c *UserRepository_UpdateUser_Call) Run(run func(c *fiber.Ctx, userID uuid.UUID, user1 *user.User)) *UserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *fiber.Ctx
		if args[0] != nil {
			arg0 = args[0].(*fiber.Ctx)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *user.User
		if args[2] != nil {
			arg2 = args[2].(*user.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_UpdateUser_Call) Return(err error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_UpdateUser_Call) RunAndReturn(run func(c *fiber.Ctx, userID uuid.UUID, user1 *user.User) error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
