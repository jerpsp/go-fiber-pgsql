// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"mime/multipart"

	"github.com/aws/aws-sdk-go-v2/service/s3"
	mock "github.com/stretchr/testify/mock"
)

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// DeletePublicFile provides a mock function for the type Storage
func (_mock *Storage) DeletePublicFile(objKey string) (*s3.DeleteObjectOutput, error) {
	ret := _mock.Called(objKey)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicFile")
	}

	var r0 *s3.DeleteObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*s3.DeleteObjectOutput, error)); ok {
		return returnFunc(objKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *s3.DeleteObjectOutput); ok {
		r0 = returnFunc(objKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.DeleteObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(objKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Storage_DeletePublicFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePublicFile'
type Storage_DeletePublicFile_Call struct {
	*mock.Call
}

// DeletePublicFile is a helper method to define mock.On call
//   - objKey string
func (_e *Storage_Expecter) DeletePublicFile(objKey interface{}) *Storage_DeletePublicFile_Call {
	return &Storage_DeletePublicFile_Call{Call: _e.mock.On("DeletePublicFile", objKey)}
}

func (_c *Storage_DeletePublicFile_Call) Run(run func(objKey string)) *Storage_DeletePublicFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Storage_DeletePublicFile_Call) Return(deleteObjectOutput *s3.DeleteObjectOutput, err error) *Storage_DeletePublicFile_Call {
	_c.Call.Return(deleteObjectOutput, err)
	return _c
}

func (_c *Storage_DeletePublicFile_Call) RunAndReturn(run func(objKey string) (*s3.DeleteObjectOutput, error)) *Storage_DeletePublicFile_Call {
	_c.Call.Return(run)
	return _c
}

// GetPresignURL provides a mock function for the type Storage
func (_mock *Storage) GetPresignURL(objKey string) (string, error) {
	ret := _mock.Called(objKey)

	if len(ret) == 0 {
		panic("no return value specified for GetPresignURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(objKey)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(objKey)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(objKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Storage_GetPresignURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPresignURL'
type Storage_GetPresignURL_Call struct {
	*mock.Call
}

// GetPresignURL is a helper method to define mock.On call
//   - objKey string
func (_e *Storage_Expecter) GetPresignURL(objKey interface{}) *Storage_GetPresignURL_Call {
	return &Storage_GetPresignURL_Call{Call: _e.mock.On("GetPresignURL", objKey)}
}

func (_c *Storage_GetPresignURL_Call) Run(run func(objKey string)) *Storage_GetPresignURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Storage_GetPresignURL_Call) Return(s string, err error) *Storage_GetPresignURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Storage_GetPresignURL_Call) RunAndReturn(run func(objKey string) (string, error)) *Storage_GetPresignURL_Call {
	_c.Call.Return(run)
	return _c
}

// PutPublicFile provides a mock function for the type Storage
func (_mock *Storage) PutPublicFile(objFile multipart.File, objKey string) (*s3.PutObjectOutput, error) {
	ret := _mock.Called(objFile, objKey)

	if len(ret) == 0 {
		panic("no return value specified for PutPublicFile")
	}

	var r0 *s3.PutObjectOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(multipart.File, string) (*s3.PutObjectOutput, error)); ok {
		return returnFunc(objFile, objKey)
	}
	if returnFunc, ok := ret.Get(0).(func(multipart.File, string) *s3.PutObjectOutput); ok {
		r0 = returnFunc(objFile, objKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3.PutObjectOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(multipart.File, string) error); ok {
		r1 = returnFunc(objFile, objKey)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Storage_PutPublicFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutPublicFile'
type Storage_PutPublicFile_Call struct {
	*mock.Call
}

// PutPublicFile is a helper method to define mock.On call
//   - objFile multipart.File
//   - objKey string
func (_e *Storage_Expecter) PutPublicFile(objFile interface{}, objKey interface{}) *Storage_PutPublicFile_Call {
	return &Storage_PutPublicFile_Call{Call: _e.mock.On("PutPublicFile", objFile, objKey)}
}

func (_c *Storage_PutPublicFile_Call) Run(run func(objFile multipart.File, objKey string)) *Storage_PutPublicFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 multipart.File
		if args[0] != nil {
			arg0 = args[0].(multipart.File)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Storage_PutPublicFile_Call) Return(putObjectOutput *s3.PutObjectOutput, err error) *Storage_PutPublicFile_Call {
	_c.Call.Return(putObjectOutput, err)
	return _c
}

func (_c *Storage_PutPublicFile_Call) RunAndReturn(run func(objFile multipart.File, objKey string) (*s3.PutObjectOutput, error)) *Storage_PutPublicFile_Call {
	_c.Call.Return(run)
	return _c
}
